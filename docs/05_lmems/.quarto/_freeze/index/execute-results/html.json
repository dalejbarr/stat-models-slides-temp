{
  "hash": "dbcbaa58c8d43432f67397a8545e8cc7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Stat Models (05): Linear mixed-effects models\"\nauthor: \"Dale Barr\"\ninstitute: University of Glasgow\ntitle-slide-attributes:\n  data-background-image: \"img/titlescreen.png\"\nformat: \n  revealjs:\n    theme: dark \n    code-line-numbers: false\n    chalkboard: true\n    df-print: tibble\nknitr:\n  opts_chunk:\n    echo: true\n---\n\n\n\n\n\n## Overview\n\n- introduction to linear mixed-effects modeling\n- example: sleepstudy data\n  - distinguish complete pooling, no pooling and partial pooling approaches\n- understand the DGP behind multi-level data and estimation with `lme4::lmer()`\n\n## {background-image=\"scooby_doo_sritchie.png\" background-size=\"contain\"}\n\n## Multilevel data\n\n - All parametric models assume model residuals are IID (\"independently and identically distributed\")\n - Data often has 'clusters' of correlated observations due to\n   - natural clustering\n   - multistage sampling\n\n## pros and cons of LMEMs {.smaller}\n\n:::: {.columns}\n\n::: {.column width=\"47%\"}\n**Pros**\n\n- powerful and expressive\n- modeling of continuous & categorical predictors\n- unbalanced/missing data (partial pooling)\n- multiple random factors\n- discrete DVs and/or non-normal distributions\n:::\n\n::: {.column width=\"47%\"}\n**Cons**\n\n- complex\n- estimated iteratively and may not converge!\n:::\n\n:::: \n\n# Understanding multi-level modeling\n\n## Belenky et al. (2003)\n\nWorked example: Belenky et al. (2003) `sleepstudy` data\n\n![](sleepstudy_article.png){fig-align=\"center\"}\n\n## Belenky et al. (2003)\n\n![](belenky_summary.png){fig-align=\"center\"}\n\n## Belenky et al. (2003)\n\n![](sleepstudy_design.png){fig-align=\"center\"}\n\n::: {.aside}\n*TIB*: time in bed\n:::\n\n## Psychomotor vigilance test\n\n![](psychomotor_vigilance_test.png){fig-align=\"center\"}\n\n## `lme4::sleepstudy` {.smaller}\n\n$Y_{ij} = \\beta_0 + \\beta_1 X_{ij} + e_{ij}$\n\nbut: observations within subject *not* independent\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n\n## Approaches to ML data\n\n1. complete pooling\n   - ignore dependencies in the data\n2. no pooling\n   - account for dependencies by fitting each subject independently\n3. partial pooling\n   - account for dependencies by explicitly modeling them\n   - fit for each subject informed by the fits for other subjects\n\n## \n\n\n\n::: {.cell}\n<iframe src=\"https://dalejbarr.github.io/statistical-models-web-apps/multilevel-site?showcase=0\" width=\"960\" height=\"700px\" data-external=\"1\"></iframe>\n:::\n\n\n\n# DGP and estimation\n\n## GLM for sleepstudy\n\n*Level 1:*\n\n$$Y_{ij} = \\beta_0 + \\beta_1 X_{ij} + e_{ij}$$\n\n*Level 2:*\n\n$$\\beta_0 = \\gamma_{00} + S_{0i}$$\n\n$$\\beta_1 = \\gamma_{10} + S_{1i}$$\n\n## Variance Components\n\n$$\\left< S_{0i}, S_{1i} \\right> \\sim N(\\left< 0, 0 \\right>, \\mathbf{\\Sigma})$$\n\n$$\\mathbf \\Sigma = \\left( \n  \\begin{array}{cc}\n  {\\tau_{00}}^2 & \\rho\\tau_{00}\\tau_{11} \\\\\n  \\rho\\tau_{00}\\tau_{11} & {\\tau_{11}}^2 \\\\ \n  \\end{array} \\right)$$\n\n$$e_{ij} \\sim N(0, \\sigma^2)$$\n\n## Estimation {.smaller}\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nlibrary(\"lme4\")\n\nmod <- lmer(Reaction ~ Days + (Days | Subject), \n            data = sleepstudy)\n\nsummary(mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLinear mixed model fit by REML ['lmerMod']\nFormula: Reaction ~ Days + (Days | Subject)\n   Data: sleepstudy\n\nREML criterion at convergence: 1743.6\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-3.9536 -0.4634  0.0231  0.4634  5.1793 \n\nRandom effects:\n Groups   Name        Variance Std.Dev. Corr\n Subject  (Intercept) 612.10   24.741       \n          Days         35.07    5.922   0.07\n Residual             654.94   25.592       \nNumber of obs: 180, groups:  Subject, 18\n\nFixed effects:\n            Estimate Std. Error t value\n(Intercept)  251.405      6.825  36.838\nDays          10.467      1.546   6.771\n\nCorrelation of Fixed Effects:\n     (Intr)\nDays -0.138\n```\n\n\n:::\n:::\n\n\n\n## model syntax {.smaller}\n\n`DV ~ iv1 + iv2 + (iv1 | random_factor)`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlmer(Reaction ~ Days + (1 | Subject), sleepstudy) # (1) random intercept\n\nlmer(Reaction ~ Days + (1 + Days | Subject), sleepstudy) # (2) random slope model.\nlmer(Reaction ~ Days + (Days | Subject), sleepstudy) # (3) identical to (2)\n\nlmer(Reaction ~ Days + (1 | Subject) + (0 + Days | Subject)) # (4) zero-covariances\nlmer(Reaction ~ Days + (Days || Subject), sleepstudy) # (5) identical to (4)\n```\n:::\n\n\n\n## p-values: model comparison {.smaller}\n\n::: {.aside}\nNB: use `REML=FALSE`\n:::\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nmod1 <- lmer(Reaction ~ Days + (Days | Subject),\n             sleepstudy, REML = FALSE)\nmod2 <- lmer(Reaction ~ (Days | Subject),\n             sleepstudy, REML = FALSE)\n\n## or:\n## mod2 <- update(mod1, . ~ . -Days)\nanova(mod1, mod2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 Ã— 8\n   npar   AIC   BIC logLik deviance Chisq    Df `Pr(>Chisq)`\n  <dbl> <dbl> <dbl>  <dbl>    <dbl> <dbl> <dbl>        <dbl>\n1     5 1785. 1801.  -888.    1775.  NA      NA  NA         \n2     6 1764. 1783.  -876.    1752.  23.5     1   0.00000123\n```\n\n\n:::\n:::\n\n\n\n## p-values: t-as-z\n\n::: {.aside}\noften reported as \"Wald $z$\"\n:::\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nmod <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy, REML = FALSE)\n\nstderr <- sqrt(diag(vcov(mod)))\ntvals <- fixef(mod) / stderr\n\n2 * (1 - pnorm(abs(tvals)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n (Intercept)         Days \n0.000000e+00 3.218759e-12 \n```\n\n\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}